Efficiency in case of algorithms: is something which deals with the time and space/memory that a problems consumes to be solved.the lesser the time and memory consumption, higher the efficiency of the algorithm 

We can define the efficiency of the code using big O notation: O(n)
usually in O(n): n will an algebraic equation, which is a function of n
like,
O(log(n)), O(n**3) etc 

and O(1) = O(On + 1)

SO what is n?
n represents the length of the input 

Consider a sudo code to decode a message

function decode(input):
	create output string ----1
	for each letter in input ---2
		get new_letter from letter in cipher -----3
		add new_letter to output ------4
	return output -----5
so the line 1 and 5 runs only 1 time, so they add upto 2 units
but for loop runs for each letter of input,so it runs for 3n units,since we need to run 2 lines within forloop and the forloop statement itself for every iteration

therefore the order of n is O(2n + 2)

so if n = 10
O(2n+2) = 22

let's see how the type of data structure affects the O(n),
if we are using lists for cipher in the sudo code then the program has to go through all 26 alphabets to find their replacing letter for each iteration, So O(n) will be something like

here we are considering the program will go through all 26 letters for each iteration because we are consdering the worst case to find the upper bound of time take by the program to execute.

However in case of average case we'll considering 13 instead of 26 since the progam might sometimes go searching above 13 or sometimes below 13 which makes an average of 13.

In case of best case we consider that the algorithm will find the letter at first attempt itself ie the letter it is searching for is 'A'.

But while mentioning in interviews we have to explicitly mention which case we are taking about.


O((3 + 26 )n + n)

Ex: if n = 10 ,O(n) = 292
if n = 1 million ,O(n) = ~29 , that shows how data structures affect the O(n)
